{"version":3,"sources":["../../../src/@ionic-native/plugins/google-sheets/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["/**\n * This is a template for new plugin wrappers\n *\n * TODO:\n * - Add this file to /src/index.ts (follow style of other plugins)\n * - Remove all the comments included in this template, EXCEPT the @Plugin\n * wrapper docs and any other docs you added\n * - Remove this note\n *\n */\nimport {Injectable} from '@angular/core';\nimport {Cordova, IonicNativePlugin, Plugin} from '@ionic-native/core';\n\n/**\n * @name GoogleSheets\n * @description\n * This plugin allows you to perform requests to the GoogleSheets API v4\n * using the native client built for android.\n *\n * @usage\n * ```typescript\n * import { GoogleSheets } from '@ionic-native/google-sheets';\n *\n *\n * constructor(private googleSheets: GoogleSheets) { }\n *\n * ...\n *\n *\n * this.googleSheets.signIn()\n *   .then(username => console.log(res))\n *   .catch(error => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName : 'GoogleSheets',\n  plugin : 'cordova-plugin-google-sheets',    // npm package name, example:\n                                              // cordova-plugin-camera\n  pluginRef : 'cordova.plugins.GoogleSheets', // the variable reference to call\n                                              // the plugin, example:\n                                              // navigator.geolocation\n  repo : '', // the github repository URL for the plugin\n  platforms : [\n    'Android'\n  ], // Array of platforms supported, example: ['Android', 'iOS']\n  install :\n      '', // OPTIONAL install command, in case the plugin requires variables\n})\n\nexport class GoogleSheets extends IonicNativePlugin {\n  public spreadsheets: SpreadsheetsOperations = new SpreadsheetsOperations();\n  /**\n   * Prompts the permissions dialog, so the user may grant access to their\n   * identity via contacts.\n   * @return {Promise<any>} Returns a promise that resolves the user grants\n   * permission to her data\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public signIn(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Removes stored credentials and revoke permissions.\n   * @return {Promise<any>} Returns a promise that resolves if the credential\n   * was successfully destroyed, fails with an error message otherwise.\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public signOut(): Promise<null> {\n    return;\n  }\n\n  /*\n   * Find out whether there is a signed in user.\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public isUserSignedIn(): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n@Plugin({\n  pluginName : 'GoogleSheets',\n  plugin : 'cordova-plugin-google-sheets', // npm package name, example:\n                                           // cordova-plugin-camera\n  pluginRef : 'cordova.plugins.GoogleSheets.spreadsheets.sheets', // the variable reference\n                                                     // to call the plugin,\n                                                     // example:\n                                                     // navigator.geolocation\n  repo : '', // the github repository URL for the plugin\n  platforms : [\n    'Android'\n  ], // Array of platforms supported, example: ['Android', 'iOS']\n  install :\n      '', // OPTIONAL install command, in case the plugin requires variables\n})\n\nexport class SheetsOperations extends IonicNativePlugin {\n  /**\n   * Copies a single sheet from a spreadsheet to another spreadsheet.\n   * https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.sheets/copyTo\n   * @param spreadsheetId {string} The ID of the spreadsheet containing the\n   * sheet to copy.\n   * @param sheetId {string} The ID of the sheet to copy.\n   * @param destinationSpreadsheetId {string} The ID of the spreadsheet to copy\n   * the sheet to.\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public copyTo(spreadsheetId: string, sheetId: string,\n                destinationSpreadsheetId: string): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n@Plugin({\n  pluginName : 'GoogleSheets',\n  plugin : 'cordova-plugin-google-sheets', // npm package name, example:\n                                           // cordova-plugin-camera\n  pluginRef : 'cordova.plugins.GoogleSheets.spreadsheets.values', // the variable reference\n                                                     // to call the plugin,\n                                                     // example:\n                                                     // navigator.geolocation\n  repo : '', // the github repository URL for the plugin\n  platforms : [\n    'Android'\n  ], // Array of platforms supported, example: ['Android', 'iOS']\n  install :\n      '', // OPTIONAL install command, in case the plugin requires variables\n})\n\nexport class ValuesOperations extends IonicNativePlugin {\n  /**\n   * Appends values to a spreadsheet.\n   * @param spreadsheetId {string} The ID of the spreadsheet to update.\n   * @param range {string} The A1 notation of a range to search for a logical\n   * table of data. Values will be appended after the last row of the table (see\n   * https://goo.gl/Cn53Gt).\n   * @param valueInputOption {string} How the input data should be interpreted.\n   * @param insertDataOption {string} How the input data should be inserted.\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public append(spreadsheetId: string, range: string,\n                values: Array<Array<string>>, valueInputOption?: string,\n                insertDataOption?: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Clears one or more ranges of values from a spreadsheet.\n   * @param spreadsheetId {string} The ID of the spreadsheet to update.\n   * @param ranges {Array<string>} The ranges to clear, in A1 notation (see\n   * https://goo.gl/Cn53Gt).\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public batchClear(spreadsheetId: string, ranges: Array<string>):\n      Promise<any> {\n    return;\n  }\n\n  /**\n   * Returns one or more ranges of values from a spreadsheet.\n   * @param spreadsheetId {string} The ID of the spreadsheet to retrieve data\n   * from.\n   * @param ranges {Array<string>} The A1 notation of the values to retrieve\n   * (see https://goo.gl/Cn53Gt).\n   * @param majorDimension {string} The dimension that results should use.\n   * @return {Promise<any>} Returns a promise that resolves if the request was\n   * successful (e.g. http status 200 ok), fails with an error message\n   * otherwise.\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public batchGet(spreadsheetId: string, ranges: Array<string>,\n                  majorDimension?: string, valueRenderOption?: string,\n                  dateTimeRenderOption?: string,\n                  standardParams?: any): Promise<any> {\n    return;\n  }\n\n  @Cordova({callbackOrder : 'reverse'})\n  public batchGetByDataFilter(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets values in one or more ranges of a spreadsheet.\n   * @param spreadsheetId {string} The ID of the spreadsheet to update.\n   * @param data {Array<ValueRange>} The new values to apply to the spreadsheet.\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public batchUpdate(spreadsheetId: string, data: Array<ValueRange>):\n      Promise<any> {\n    return;\n  }\n\n  @Cordova({callbackOrder : 'reverse'})\n  public batchUpdateByDataFilter(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Clears values from a spreadsheet. Only values are cleared -- all other\n   * properties of the cell (such as formatting, data validation, etc..) are\n   * kept.\n   * @param spreadsheetId {string} The ID of the spreadsheet to update.\n   * @param range {string} The A1 notation of the values to clear.\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public clear(spreadsheetId: string, range: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Returns a range of values from a spreadsheet.\n   * @param spreadsheetId {string} The ID of the spreadsheet to retrieve data\n   * from.\n   * @param range {string} The A1 notation of the values to retrieve.\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public get(spreadsheetId: string, range: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets values in a range of a spreadsheet.\n   * @param spreadsheetId {string} The ID of the spreadsheet to update.\n   * @param range {string} The A1 notation of the values to update.\n   * @param valueInputOption {string} How the input data should be interpreted.\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public update(spreadsheetId: string, range: string,\n                values: Array<Array<string>>,\n                valueInputOption?: string): Promise<any> {\n    return;\n  }\n  static decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nexport class ValueRange {\n  range: string;\n  majorDimension: string;\n  values: Array<Array<string>>;\n  }\n\nexport class SpreadsheetBuilder {\n  _title: string;\n  _locale: string;\n  _autoRecalc: string;\n  _timeZone: string;\n  _defaultFormat: any;\n  _iterativeCalculationSettings: any;\n  public constructor(title: string, locale: string) {\n    this._title = title;\n    this._locale = locale;\n  }\n\n  public get title(): string { return this._title; }\n  public get locale(): string { return this._locale; }\n  public get autoRecalc(): string { return this._autoRecalc; }\n  public setAutoRecalc(value: string): SpreadsheetBuilder {\n    this._autoRecalc = value;\n    return this;\n  }\n  public get timeZone(): string { return this._timeZone; };\n  public setTimezone(value: string): SpreadsheetBuilder {\n    this._timeZone = value;\n    return this;\n  }\n  public build(): Spreadsheet { return; }\n};\n\nexport class Spreadsheet {\n  readonly title: string;\n  readonly locale: string;\n  readonly autoRecalc: string;\n  readonly timeZone: string;\n  readonly defaultFormat: any;\n  readonly iterativeCalculationSettings: any;\n  public static Builder(title: string, locale: string): SpreadsheetBuilder {\n    SpreadsheetBuilder.prototype.build = function(): Spreadsheet {\n      return new Spreadsheet(this);\n    };\n    return new SpreadsheetBuilder(title, locale);\n  };\n\n  protected constructor(params: SpreadsheetBuilder) {\n    if (params instanceof SpreadsheetBuilder) {\n      this.title = params.title;\n      this.locale = params.locale;\n      this.autoRecalc = params.autoRecalc || undefined;\n      this.timeZone = params.timeZone || undefined;\n    } else {\n      throw new TypeError('');\n    }\n  }\n}\n\n\n@Plugin({\n  pluginName : 'GoogleSheets',\n  plugin : 'cordova-plugin-google-sheets', // npm package name, example:\n                                           // cordova-plugin-camera\n  pluginRef : 'cordova.plugins.GoogleSheets.spreadsheets', // the variable reference\n                                                     // to call the plugin,\n                                                     // example:\n                                                     // navigator.geolocation\n  repo : '', // the github repository URL for the plugin\n  platforms : [\n    'Android'\n  ], // Array of platforms supported, example: ['Android', 'iOS']\n  install :\n      '', // OPTIONAL install command, in case the plugin requires variables\n})\n\nexport class SpreadsheetsOperations extends IonicNativePlugin {\n  public sheets: SheetsOperations = new SheetsOperations();\n  public values: ValuesOperations = new ValuesOperations();\n\n  /*\n   *\n   */\n  @Cordova({callbackOrder : 'reverse' })\n  public get(spreadsheetId: string, ranges: Array<string>, includeGridData: boolean): Promise<any> {\n    return;\n  }\n\n  /**\n   * Creates a spreadsheet, returning the newly created spreadsheet.\n   * @param spreadsheet {Spreadsheet} Contains the definition of the spreadsheet to be created. This object needs it's title and locale fields to be defined.\n   */\n  @Cordova({callbackOrder : 'reverse'})\n  public create(spreadsheet: Spreadsheet): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}